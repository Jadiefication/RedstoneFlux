buildscript {
    ext.kotlin_version = '2.2.0'
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}
plugins {
    id 'java'
    id 'io.github.goooler.shadow' version '8.1.8'
}
apply plugin: 'kotlin'

project.ext {
    archiveFolder = file("archive/")
    targetFolder = file("target/")
    apiFolder = file("target-api/")
}

group = 'io.github.Jadiefication.redstoneflux'
version = property('version')

allprojects {
    apply plugin: 'java'
    apply plugin: 'io.github.goooler.shadow'

    java {
        toolchain {
            languageVersion.set(JavaLanguageVersion.of(21))
        }
    }

    repositories {
        //mavenLocal()
        mavenCentral()
        maven { url 'https://jitpack.io' }
        maven {
            name = "papermc"
            url = uri("https://repo.papermc.io/repository/maven-public/")
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/groups/public/"
        }
        maven {
            url "https://repo.nexomc.com/releases"
        }
        maven {
            name = "tcoded-releases"
            url = "https://repo.tcoded.com/releases"
        }
    }

    dependencies {
        compileOnly "io.papermc.paper:paper-api:1.21.7-R0.1-SNAPSHOT"

        // "com.nexomc:nexo:1.8"
        //compileOnly 'com.github.LoneDev6:API-ItemsAdder:4.0.11'

        implementation "com.tcoded:FoliaLib:0.5.1"
        implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.8.0"
    }

    compileJava.options.encoding = 'UTF-8'

    tasks.withType(JavaCompile).tap {
        configureEach {
            options.encoding = 'UTF-8'
        }
    }
}

subprojects {

    shadowJar {
        archiveFileName = "${project.name}.jar"
        destinationDirectory = rootProject.targetFolder
    }

}

repositories {
    maven {
        name = "devmart-other"
        url = "https://nexuslite.gcnt.net/repos/other/"
    }
    mavenCentral()
}

dependencies {
    implementation(project(":FluxAPI"))
    implementation "com.github.Traqueur-dev:CommandsAPI:4.2.1"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
}

tasks.register('generateVersionProperties') {
    doLast {
        def file = new File("$projectDir/src/main/resources/version.properties")
        if (!file.parentFile.exists()) {
            file.parentFile.mkdirs()
        }
        file.text = "version=${project.version}"
    }
}

processResources.dependsOn generateVersionProperties

jar {
    from {
        for (File file : rootProject.archiveFolder.listFiles()) {
            zipTree(file)
        }
    }
}

processResources {
    outputs.upToDateWhen { false }
    def props = [version: version]
    inputs.properties props
    filesMatching('**/*.yml') {
        expand props
    }
}

shadowJar {
    dependsOn(jar)

    relocate("com.tcoded.folialib", "io.github.Jadiefication.redstoneflux.lib.folialib")

    delete fileTree(rootProject.targetFolder.getAbsolutePath())

    archiveFileName = rootProject.name + "-" + rootProject.version + ".jar"
    destinationDirectory = rootProject.targetFolder

    from sourceSets.getByName("main").output
    configurations = [project.configurations.getByName("runtimeClasspath")]
}

clean {
    delete rootProject.archiveFolder
}

build {
    dependsOn shadowJar
    dependsOn clean
}

tasks.register('publish') {
    dependsOn ':FluxAPI:publish'
}

publish.shouldRunAfter shadowJar
shadowJar.shouldRunAfter build
build.shouldRunAfter subprojects.build

compileJava.dependsOn childProjects.values().shadowJar

compileJava.options.encoding = 'UTF-8'

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}